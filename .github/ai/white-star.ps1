param(
  [ValidateSet('policy','qa','brief','all')]
  [string]$Action = 'all'
)

$ErrorActionPreference = "Stop"

function Ensure-Dir($p){ if(!(Test-Path $p)){ New-Item -ItemType Directory -Force -Path $p | Out-Null } }
function Write-Json($path,$obj){ Ensure-Dir (Split-Path $path); $obj | ConvertTo-Json -Depth 32 | Set-Content -Path $path -NoNewline -Encoding UTF8 }
function Write-Text($path,$txt){ Ensure-Dir (Split-Path $path); $txt | Set-Content -Path $path -NoNewline -Encoding UTF8 }

$mem = ConvertFrom-Yaml (Get-Content -Raw -LiteralPath "Cody's Memory.yaml")
$outRoot = "apps/overseers/out"
Ensure-Dir $outRoot

# policy.check — simple static scan for plaintext secrets
if ($Action -eq 'policy' -or $Action -eq 'all') {
  $patterns = @('token','api_key','apikey','secret','password','AKIA[0-9A-Z]{16}')
  $hits = @()
  Get-ChildItem -File -Recurse -ErrorAction SilentlyContinue |
    Where-Object { $_.FullName -notmatch '\.git\' } |
    ForEach-Object {
      $t = (Get-Content -Raw -LiteralPath $_.FullName -ErrorAction SilentlyContinue)
      foreach ($p in $patterns) {
        if ($t -match $p) {
          $hits += [ordered]@{ file = $_.FullName; pattern = $p }
        }
      }
    }
  $report = [ordered]@{
    issues = $hits
    guidance = "No plaintext secrets. Use vault refs only (e.g., vault://palace/...)."
    generated_utc = (Get-Date).ToUniversalTime().ToString("o")
  }
  Write-Json "$outRoot/policy-report.json" $report
}

# qa.review_plan — sanity check that route exists and deliverables are minimal/testable
if ($Action -eq 'qa' -or $Action -eq 'all') {
  $approved = $false
  $notes = @()
  $routePath = Join-Path $outRoot "route.json"
  if (Test-Path $routePath) {
    $route = ConvertFrom-Json (Get-Content -Raw -LiteralPath $routePath)
    $ids = $route.tasks.id
    if ($ids -contains 'R1' -and $ids -contains 'R2' -and $ids -contains 'R3') {
      $approved = $true
      $notes += "R1–R3 present; minimal app shell + importer + scaffolds achievable."
    } else {
      $notes += "Missing required tasks (need R1,R2,R3)."
    }
  } else {
    $notes += "route.json not found; run Rey Czar first."
  }
  $qa = [ordered]@{
    reviewer = "White Star"
    approved = $approved
    notes    = $notes
    ts       = (Get-Date).ToUniversalTime().ToString("o")
  }
  Write-Json "$outRoot/qa-approval.json" $qa
}

# docs.brief — one-page high-level overview tied to your domain + app-of-apps
if ($Action -eq 'brief' -or $Action -eq 'all') {
  Ensure-Dir "docs"
  $brief = @"
# Fairies of Avalon — Overseers BRIEF

**Domain:** fairiesofavalon.com  
**App Model:** Installable PWA (app-of-apps). Micro-apps live under `/apps/*`.

## Phase Now — Overseers
- **Rey Czar (Engineer & Builder)**: route plans (R1–R3), draft least-privilege scopes, propose Memory changes, enqueue tasks.
- **White Star (QA & Policy)**: approve minimal plans, block plaintext secrets, produce 1-page briefs, keep tone & terminology, run the queue safely.

## Near-Term Cross-Device
- PWA installed on phone/tablet/PC. Alarms/reminders via Service Worker + (later) Push.
- Permissions per Fairy (drafts generated in /data/out/scopes/). No plaintext tokens in repo; use external vault refs (vault://...).

## Frontend
- Root at **fairiesofavalon.com**.
- App shell: `/index.html` + `/app.js` + `/sw.js` + `/manifest.webmanifest`.
- Import map enforced for `three`, `three/addons/`, `@pixiv/three-vrm`.
- Wings Lab at `/wings-importer.html`. Overseers Console at `/apps/overseers.html`.

## Deployment
- GitHub Actions: Queue → Runner → AI Core → Deploy.
- Pages artifact writes a CNAME so the custom domain stays bound.

*This document is auto-generated by White Star.*
"@
  Write-Text "docs/Overseers-BRIEF.md" $brief
}

Write-Text "$outRoot/white-star.ok" ("White Star ran: " + (Get-Date).ToString("o"))
